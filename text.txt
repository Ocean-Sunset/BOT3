# Ensure the music folder exists
if not os.path.exists("music"):
    os.makedirs("music")

# Set up the bot
bot = commands.Bot(command_prefix="?", intents=discord.Intents.all())

@bot.command(name="upload")
async def upload(ctx):
    """Allow users to upload .mp3 files."""
    if not ctx.message.attachments:
        await ctx.send("‚ùå Please attach an audio file to upload.")
        return

    for attachment in ctx.message.attachments:
        if attachment.filename.endswith((".mp3", ".wav", ".ogg")):
            file_path = os.path.join("music", attachment.filename)
            await attachment.save(file_path)
            await ctx.send(f"‚úÖ File `{attachment.filename}` has been uploaded and saved.")
        else:
            await ctx.send(f"‚ùå `{attachment.filename}` is not a supported audio format. Please upload .mp3, .wav, or .ogg files.")

@bot.command(name="play")
async def play(ctx, *, query: str = None):
    """Play a song from the music folder or a YouTube URL."""
    if not ctx.author.voice:
        await ctx.send("‚ùå You must be in a voice channel to use this command.")
        return

    voice_channel = ctx.author.voice.channel

    # Join the voice channel
    if ctx.voice_client is None:
        vc = await voice_channel.connect()
    else:
        vc = ctx.voice_client

    # If a query is provided, download the song from YouTube
    if query:
        await ctx.send(f"üîç Searching for `{query}`...")
        ydl_opts = {
            "format": "bestaudio/best",
            "outtmpl": "music/%(title)s.%(ext)s",
            "noplaylist": True,
        }
        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(query, download=True)
            song_path = ydl.prepare_filename(info)
            await ctx.send(f"‚úÖ Downloaded `{info['title']}`. Now playing...")
    else:
        # Play the first song in the music folder
        if not os.listdir("music"):
            await ctx.send("‚ùå The music folder is empty. Upload some songs using `?upload` or provide a YouTube URL.")
            return
        song = sorted(os.listdir("music"))[0]
        song_path = os.path.join("music", song)

    # Play the song
    vc.play(discord.FFmpegPCMAudio(song_path), after=lambda e: print(f"Finished playing: {song_path}"))
    await ctx.send(f"üéµ Now playing: `{os.path.basename(song_path)}`")

@bot.command(name="queue")
async def queue(ctx):
    """List all songs in the music folder."""
    songs = sorted(os.listdir("music"))
    if not songs:
        await ctx.send("‚ùå The music folder is empty. Upload some songs using `?upload`.")
        return

    song_list = "\n".join(f"{i + 1}. {song}" for i, song in enumerate(songs))
    await ctx.send(f"üé∂ **Music Queue:**\n{song_list}")

@bot.command(name="skip")
async def skip(ctx):
    """Skip the currently playing song."""
    if not ctx.voice_client or not ctx.voice_client.is_playing():
        await ctx.send("‚ùå No song is currently playing.")
        return

    ctx.voice_client.stop()
    await ctx.send("‚è≠Ô∏è Skipped the current song.")

@bot.command(name="stop")
async def stop(ctx):
    """Stop the music and disconnect the bot."""
    if not ctx.voice_client:
        await ctx.send("‚ùå The bot is not connected to a voice channel.")
        return

    await ctx.voice_client.disconnect()
    await ctx.send("‚èπÔ∏è Stopped the music and disconnected.")


----------------------------------------------------------

